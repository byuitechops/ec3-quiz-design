

(function () {
    //String helpers
    if (typeof String.prototype.endsWith !== 'function') {
        String.prototype.endsWith = function (suffix) {
            return this.indexOf(suffix, this.length - suffix.length) !== -1;
        };
    }

    //////// Date helpers
    var DATE_FORMAT = "yyyy-MM-ddThh:mm:ssZ";
    var DATE_FORMAT_LOCAL = "yyyy-MM-ddThh:mm:ss";
    function ToLocalDateStr(utcDateTime) {
        if (utcDateTime) {
            // FF requires the Z
            return new Date(utcDateTime + "Z").format(DATE_FORMAT_LOCAL);
        } else { // null or undefined - no-op
            return utcDateTime;
        }
    }

    Date.prototype.format = function (format) //author: meizz
    {
        var o = {
            "M+": this.getMonth() + 1, //month
            "d+": this.getDate(),    //day
            "h+": this.getHours(),   //hour
            "m+": this.getMinutes(), //minute
            "s+": this.getSeconds(), //second
            "q+": Math.floor((this.getMonth() + 3) / 3),  //quarter
            "S": this.getMilliseconds() //millisecond
        }

        if (/(y+)/.test(format)) format = format.replace(RegExp.$1,
          (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o) if (new RegExp("(" + k + ")").test(format))
            format = format.replace(RegExp.$1,
              RegExp.$1.length == 1 ? o[k] :
                ("00" + o[k]).substr(("" + o[k]).length));
        return format;
    }
    //////// End Date helpers

    siApp.Utils = {
        linkItemFromList: function (student, list, listProp, studentProp, studObjName) {
            if (!list)
                return;
            for (var i = 0; i < list.length; i++) {
                var listObj = list[i];
                if (listObj[listProp] == student[studentProp]) {
                    student[studObjName] = listObj;
                    return;
                }
            }
        },
        choiceObjectBackToId: function (sourceObj, choicePtr, sourceProp, choiceProp, fallBackBlank) {
            if ((choicePtr != null && typeof choicePtr != "undefined")) {
                sourceObj[sourceProp] = choicePtr[choiceProp];
            }
            else if (fallBackBlank) {
                sourceObj[sourceProp] = "";
            }
            return sourceObj;
        },
        // TODO: phase this out...
        PersistEditObj: function (editObj, collection, idProp, newId, staySelected) {
            if (!staySelected) {
                editObj.Selected = false;
            }

            if (editObj[idProp] < 0) { // is new
                editObj[idProp] = newId;
                var copy = copyObject(editObj);
                collection.push(copy);
            } else {
                for (var i = 0; i < collection.length; i++) {
                    if (collection[i][idProp] == editObj[idProp]) {
                        collection[i] = copyObject(editObj); // save changes to client
                        break;
                    }
                }
            }
        },
        AbsUrl: function (url) { // make a relative url absolute
            var origin = window.location.protocol + '//' + window.location.host;
            return origin + "/" + url;
        },
        ToLocal: function (utcDateTime) {
            if (typeof utcDateTime !== "string") {
                // treat it as an array of items: convert all dates you find
                for (var i = 0; i < utcDateTime.length; i++) {
                    var item = utcDateTime[i];
                    for (var prop in item) {
                        if (prop.indexOf("Date") > -1) {
                            item[prop + "Local"] = ToLocalDateStr(item[prop]);
                        }
                    }
                }

                return utcDateTime;
            } else {
                return ToLocalDateStr(utcDateTime);
            }
        },
        ToUTC: function (localDateStr) {
            if (!localDateStr || typeof localDateStr !== "string") {
                return localDateStr;
            }

            var addZ = localDateStr.endsWith("Z") ? "" : "Z";
            var date = new Date(localDateStr + addZ); // calling Date constructor subtracts the local time zone offset a 2nd time
            date.setMinutes(date.getMinutes() + (2 * date.getTimezoneOffset()));
            return date.format(DATE_FORMAT);
        },
        ParseName: function (name) {
            var data = {};
            if (name) {
                var results = /^(\w+)[\s,]*(\w+)*/.exec(name);
                if (results && results.length > 1) {
                    data.found = true;
                    data.lastName = results[1];
                    if (results.length > 2) {
                        data.firstName = results[2];
                    } else {
                        data.firstName = null;
                    }
                }
            }

            return data;
        },
        resetFilePicker: function (filePicker) {
            if (filePicker != null) {
                var eventScope = filePicker.scopePtr;//set up in the directive this service pairs with.
                var newPicker = $("<input type='file'></input>");
                newPicker.attr("id", filePicker.attr("id"));
                newPicker.attr("name", filePicker.attr("name"));
                newPicker.scopePtr = eventScope;
                if (eventScope && typeof eventScope.changeFunc == "function") {
                    newPicker.unbind("change").on("change", eventScope.changeFunc);
                }

                filePicker.before(newPicker);
                filePicker.remove();
            }
        }
    };
}());