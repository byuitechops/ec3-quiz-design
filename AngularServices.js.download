if (typeof siApp == 'undefined' || siApp == null)
    siApp = angular.module('ngSiApp', ['ngSanitize']);


siApp.service('$myBaseUrlService', function () {
    var baseUrl = '';
    this.SetBaseUrl = function (url) {
        baseUrl = url;
    }
    this.GetBaseURL = function () {
        return baseUrl;
    }
});

siApp.service('$masterDataService', ['$http',
    function ($http) {
        siApp.httpGet = function (url, params, successFunc) {
            $http.get(url, { params: params })
            .success(function (results) {
                if (dataRouting(results)) {
                    successFunc(results);
                }
            })
            .error(function (data, status, headers, config) {
                waitHide();
                $('body').append(data);
            });
        };

        siApp.httpPost = function (url, params, successFunc) {
            $http.post(url, params)
            .success(function (data, status, headers, config) {
                if (dataRouting(data)) {
                    successFunc(data);
                }
            })
            .error(function (data, status, headers, config) {
                waitHide();
                $('body').append(data);
            });
        };

        //this could be modified to do ajax requests as a future refactor for example.
        //in a case like that, you would probably want something with more information
        //like the key and the page name or something like that.
        this.GetData = function (key) {
            return angularMasterData.GetData(key);
        }

        this.SetData = function (key, data) {
            angularMasterData.SetData(key, data);
        }
    }]);

siApp.service('$masterEventService', function ()
{
    //This is to allow our non-angular stuff to broadcast events
    //that angular can subscribe to, and for angular to have a way to broadcast events
    //that we can listen to in non-angular script as well.
    this.Subscribe = function(eventName, handler, identifier)
    {
        //If you pass an identifier in then we know that this event has multiple listeners
        var subscriber = this;
        if (identifier)
        {
            this[identifier] = {};
            subscriber = this[identifier];
        }
        subscriber[eventName] = handler;
        if (!angularMasterEvents.IsSubscribed(subscriber))
        {
            angularMasterEvents.Subscribe(subscriber);
        }
        

    }

    this.Unsubscribe = function (eventName, identifer)
    {
        var unsubObj = this;
        if (identifier)
        {
            unsubObj = this[identifier];
        }
        unsubObj[eventName] = null;
    }

    
    this.Broadcast = function(eventName, args)
    {
        angularMasterEvents.Broadcast(eventName, args);
    }
});

siApp.service('$fileUploadService', function ()
{
    /*postUrl: is the url of the end point to save to.
    * fileInput: is the jquery object for the file input that you want to post the file from.
    * paramsObj: allows you to include additional information in the post with the file
    * succesFunc: callback to execute when the post returns with success
    * errorFunc: callback to execute when the post fails.
    */
    this.AjaxUploadFile = function (postUrl, dtype, fileInput, paramsObj, successFunc, errorFunc)
    {
        /*We would be able to just do clone and put the clone in the form if it weren't for IE security being annoying.
        *We can't just put a clone on the dom where the original was because we lose the angular directive connection.
        *So we put a placeholder where the file input was, then we can move it into a new form to submit and put it back when we are done.
        */
        var placeHolder = $("<span></span>");
        fileInput.after(placeHolder);
        //build a new form
        var form = $('<form></form>');
        $("body").append(form);
        form.hide();

        if (paramsObj)
        {
            for (var prop in paramsObj)
            {
                var hidden = $('<input type="hidden"></input>');
                hidden.attr("name", prop);
                hidden.val(paramsObj[prop]);
                form.append(hidden);
            }
        }
        form.append(fileInput);
        
        form.ajaxForm({
            url: postUrl,
            type: "POST",
            dataType: dtype,
            success: function (data)
            {
                successFunc(data);
                form.remove();
                placeHolder.before(fileInput);//put the file input back
                placeHolder.remove();
            },
            error: function (data)
            {
                if (typeof errorFunc == "function")
                {
                    errorFunc(data);
                    
                }
                form.remove();
                placeHolder.before(fileInput);//put the file input back
                placeHolder.remove();
            }
        });

        form.submit();
    }
});